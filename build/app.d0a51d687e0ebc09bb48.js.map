{"version":3,"sources":["webpack:///./app/index.tsx","webpack:///./app/actions/todos.ts","webpack:///./app/reducers/todos.ts","webpack:///./app/reducers/index.ts","webpack:///./app/middleware/logger.ts","webpack:///./app/store/index.ts","webpack:///./main.tsx"],"names":["FirstPage","href","App","module","path","component","TodoActions","Type","addTodo","createAction","ADD_TODO","editTodo","EDIT_TODO","deleteTodo","DELETE_TODO","completeTodo","COMPLETE_TODO","completeAll","COMPLETE_ALL","clearCompleted","CLEAR_COMPLETED","todoReducer","handleActions","state","action","payload","text","id","reduce","max","todo","Math","completed","filter","map","rootReducer","todos","logger","store","next","initialState","middleware","render","history","document","getElementById"],"mappings":"0FAAA,kFAMMA,EAAY,WAAM,OACtB,6BACE,+CACA,iHACA,uBAAGC,KAAK,kCAAgC,6BAG/BC,EAAM,cAAIC,EAAJ,EAAY,WAAM,OACnC,kBAAC,IAAM,KACL,kBAAC,IAAK,CAACC,KAAK,IAAIC,UAAWL,U,gECVd,EAAAM,EACHC,E,+EADGD,EAAA,MAAW,IAC1B,SAAYC,GACV,sBACA,wBACA,4BACA,gCACA,8BACA,oCANF,CAAYA,EAAA,EAAAA,OAAA,EAAAA,KAAI,KASH,EAAAC,QAAU,OAAAC,EAAA,GAA6CF,EAAKG,UAC5D,EAAAC,SAAW,OAAAF,EAAA,GAA2CF,EAAKK,WAC3D,EAAAC,WAAa,OAAAJ,EAAA,GAA8BF,EAAKO,aAChD,EAAAC,aAAe,OAAAN,EAAA,GAA8BF,EAAKS,eAClD,EAAAC,YAAc,OAAAR,EAAA,GAAaF,EAAKW,cAChC,EAAAC,eAAiB,OAAAV,EAAA,GAAaF,EAAKa,iBAI3C,I,yYCXMC,EAAc,OAAAC,EAAA,KAAa,MAEnC,EAAYf,KAAKG,UAAW,SAACa,EAAOC,GACnC,OAAIA,EAAOC,SAAWD,EAAOC,QAAQC,KAC5B,EAAP,CACE,CACEC,GAAIJ,EAAMK,QAAO,SAACC,EAAKC,GAAS,OAAAC,KAAKF,IAAIC,EAAKH,IAAM,EAAGE,KAAM,GAAK,EAClEG,WAAW,EACXN,KAAMF,EAAOC,QAAQC,OAEpBH,GAGAA,GAET,EAAC,EAAYhB,KAAKO,aAAc,SAACS,EAAOC,GACtC,OAAOD,EAAMU,QAAO,SAACH,GAAS,OAAAA,EAAKH,KAAQH,EAAOC,YAEpD,EAAC,EAAYlB,KAAKK,WAAY,SAACW,EAAOC,GACpC,OAAOD,EAAMW,KAAI,SAACJ,GAChB,OAAKA,GAASN,GAAWA,EAAOC,UAGxBK,EAAKH,IAAM,KAAOH,EAAOC,QAAQE,GAAK,EAAD,KAAMG,GAAI,CAAEJ,KAAMF,EAAOC,QAAQC,OAFrEI,MAKb,EAAC,EAAYvB,KAAKS,eAAgB,SAACO,EAAOC,GACxC,OAAOD,EAAMW,KAAI,SAACJ,GAChB,OAAAA,EAAKH,KAAQH,EAAOC,QAAkB,EAAD,KAAMK,GAAI,CAAEE,WAAYF,EAAKE,YAAcF,MAGpF,EAAC,EAAYvB,KAAKW,cAAe,SAACK,EAAOC,GACvC,OAAOD,EAAMW,KAAI,SAACJ,GAAS,cAAMA,GAAI,CAAEE,WAAW,QAEpD,EAAC,EAAYzB,KAAKa,iBAAkB,SAACG,EAAOC,GAC1C,OAAOD,EAAMU,QAAO,SAACH,GAAS,OAAmB,IAAnBA,EAAKE,c,GA3CC,CACxC,CACEL,GAAI,EACJD,KAAM,YACNM,WAAW,KCHFG,EAAc,0BAA2B,CACpDC,MAAOf,ICLIgB,EAAqB,SAACC,GAAU,gBAACC,GAAS,gBAACf,GAItD,OAAOe,EAAKf,M,YCDiBgB,EACzBC,E,gBCGA,EAAU,cACV,GDJAA,EAAa,0BAAgB,IAAOJ,GAM1B,sBAAYF,EAAoBK,EAAqBC,ICArE,IAASC,OACP,kBAAC,IAAQ,CAACJ,MAAO,GACf,kBAAC,IAAM,CAACK,QAAS,GACf,kBAAC,IAAG,QAGRC,SAASC,eAAe,W","file":"app.d0a51d687e0ebc09bb48.js","sourcesContent":["import { Route, Switch } from 'react-router';\n\nimport React from 'react';\n// import { App as TodoApp } from 'app/containers/App';\nimport { hot } from 'react-hot-loader';\n\nconst FirstPage = () => (\n  <div>\n    <h1>Arkadii Aristov</h1>\n    <p>Hey you, thanks for coming. This is my personal page and feels free to contact me.</p>\n    <a href='mailto:arkadyaristov@gmail.com'>arkadyaristov@gmail.com</a>\n  </div>)\n\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={FirstPage} />\n  </Switch>\n));\n","import { useMemo } from 'react';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { createAction } from 'redux-actions';\nimport { TodoModel } from 'app/models';\n\nexport namespace TodoActions {\n  export enum Type {\n    ADD_TODO = 'ADD_TODO',\n    EDIT_TODO = 'EDIT_TODO',\n    DELETE_TODO = 'DELETE_TODO',\n    COMPLETE_TODO = 'COMPLETE_TODO',\n    COMPLETE_ALL = 'COMPLETE_ALL',\n    CLEAR_COMPLETED = 'CLEAR_COMPLETED'\n  }\n\n  export const addTodo = createAction<PartialPick<TodoModel, 'text'>>(Type.ADD_TODO);\n  export const editTodo = createAction<PartialPick<TodoModel, 'id'>>(Type.EDIT_TODO);\n  export const deleteTodo = createAction<TodoModel['id']>(Type.DELETE_TODO);\n  export const completeTodo = createAction<TodoModel['id']>(Type.COMPLETE_TODO);\n  export const completeAll = createAction(Type.COMPLETE_ALL);\n  export const clearCompleted = createAction(Type.CLEAR_COMPLETED);\n}\n\nexport type TodoActions = Omit<typeof TodoActions, 'Type'>;\nexport const useTodoActions = (dispatch: Dispatch) => {\n  const { Type, ...actions } = TodoActions;\n  return useMemo(() => bindActionCreators(actions as any, dispatch), [dispatch]) as TodoActions;\n};\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { TodoActions } from 'app/actions/todos';\nimport { TodoModel } from 'app/models';\n\nconst initialState: RootState.TodoState = [\n  {\n    id: 1,\n    text: 'Use Redux',\n    completed: false\n  }\n];\n\nexport const todoReducer = handleActions<RootState.TodoState, TodoModel>(\n  {\n    [TodoActions.Type.ADD_TODO]: (state, action) => {\n      if (action.payload && action.payload.text) {\n        return [\n          {\n            id: state.reduce((max, todo) => Math.max(todo.id || 1, max), 0) + 1,\n            completed: false,\n            text: action.payload.text\n          },\n          ...state\n        ];\n      }\n      return state;\n    },\n    [TodoActions.Type.DELETE_TODO]: (state, action) => {\n      return state.filter((todo) => todo.id !== (action.payload as any));\n    },\n    [TodoActions.Type.EDIT_TODO]: (state, action) => {\n      return state.map((todo) => {\n        if (!todo || !action || !action.payload) {\n          return todo;\n        }\n        return (todo.id || 0) === action.payload.id ? { ...todo, text: action.payload.text } : todo;\n      });\n    },\n    [TodoActions.Type.COMPLETE_TODO]: (state, action) => {\n      return state.map((todo) =>\n        todo.id === (action.payload as any) ? { ...todo, completed: !todo.completed } : todo\n      );\n    },\n    [TodoActions.Type.COMPLETE_ALL]: (state, action) => {\n      return state.map((todo) => ({ ...todo, completed: true }));\n    },\n    [TodoActions.Type.CLEAR_COMPLETED]: (state, action) => {\n      return state.filter((todo) => todo.completed === false);\n    }\n  },\n  initialState\n);\n","import { combineReducers } from 'redux';\nimport { RootState } from './state';\nimport { todoReducer } from './todos';\n\nexport { RootState };\n\nexport const rootReducer = combineReducers<RootState>({\n  todos: todoReducer\n});\n","import { Middleware } from 'redux';\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState, rootReducer } from 'app/reducers';\nimport { logger, thunk } from 'app/middleware';\n\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(thunk, logger);\n\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<RootState>;\n\n  if (module.hot) {\n    module.hot.accept('app/reducers', () => {\n      const nextReducer = require('app/reducers');\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport { configureStore } from 'app/store';\nimport { Router } from 'react-router';\nimport { App } from './app';\n\n// prepare store\nconst history = createBrowserHistory();\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}